name: BeaconAI CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Test & Coverage
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: mobile-frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./mobile-frontend
      run: npm ci
      
    - name: Run type checking
      working-directory: ./mobile-frontend
      run: npx tsc --noEmit
      
    - name: Run linting
      working-directory: ./mobile-frontend
      run: npm run lint
      
    - name: Run unit tests with coverage
      working-directory: ./mobile-frontend
      run: npm test -- --coverage --watchAll=false --testTimeout=30000
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./mobile-frontend/coverage
        flags: unittests
        name: codecov-umbrella
        
    - name: Check coverage threshold
      working-directory: ./mobile-frontend
      run: |
        COVERAGE=$(npm test -- --coverage --watchAll=false --passWithNoTests --silent | grep "All files" | awk '{print $2}' | sed 's/%//')
        echo "Coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "Coverage is below 80% threshold"
          exit 1
        fi

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: mobile-frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./mobile-frontend
      run: npm ci
      
    - name: Build web version
      working-directory: ./mobile-frontend
      run: npm run build:web
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: web-build
        path: mobile-frontend/dist/

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: mobile-frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./mobile-frontend
      run: npm ci
      
    - name: Run security audit
      working-directory: ./mobile-frontend
      run: npm audit --audit-level=moderate
      
    - name: Run dependency check
      working-directory: ./mobile-frontend
      run: npx audit-ci --config audit-ci.json

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: mobile-frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./mobile-frontend
      run: npm ci
      
    - name: Run performance tests
      working-directory: ./mobile-frontend
      run: npm test -- --testNamePattern="Performance Tests" --testTimeout=60000

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: mobile-frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./mobile-frontend
      run: npm ci
      
    - name: Run integration tests
      working-directory: ./mobile-frontend
      run: npm test -- --testNamePattern="Integration|End-to-End" --testTimeout=60000

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: web-build
        path: ./dist
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add staging deployment commands here
        
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security, performance, integration]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: web-build
        path: ./dist
        
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands here

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [test, build, security, performance, integration]
    if: always()
    
    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "✅ All tests passed successfully!"
        # Add notification logic (Slack, email, etc.)
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Some tests failed!"
        # Add failure notification logic